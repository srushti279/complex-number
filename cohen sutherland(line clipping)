#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
// Define the clipping window boundaries
const float Xmin = 0.2f;
const float Xmax = 0.8f;
const float Ymin = 0.2f;
const float Ymax = 0.8f;
// Define region codes
enum RegionCode {
INSIDE = 0,
LEFT = 1,
RIGHT = 2,
BOTTOM = 4,
TOP = 8
};
// Compute the region code for a point
int computeOutCode(float x, float y) {
int code = INSIDE;
if (x < Xmin) code |= LEFT;
if (x > Xmax) code |= RIGHT;
if (y < Ymin) code |= BOTTOM;
if (y > Ymax) code |= TOP;
return code;
}
// Cohen-Sutherland line clipping algorithm
void cohenSutherlandClip(float &x0, float &y0, float &x1, float &y1) {
int code0 = computeOutCode(x0, y0);
int code1 = computeOutCode(x1, y1);
bool accept = false;
while (true) {
if ((code0 | code1) == 0) { // Both points inside
accept = true;
break;
} else if ((code0 & code1) != 0) { // Both points outside
break;
} else {
int codeOut;
float x, y;
// Determine which point to clip
if (code0 != 0)
codeOut = code0;
else
codeOut = code1;
// Clip the line against the clipping window
if (codeOut & TOP) {
x = x0 + (x1 - x0) * (Ymax - y0) / (y1 - y0);
y = Ymax;
} else if (codeOut & BOTTOM) {
x = x0 + (x1 - x0) * (Ymin - y0) / (y1 - y0);
y = Ymin;
} else if (codeOut & RIGHT) {
y = y0 + (y1 - y0) * (Xmax - x0) / (x1 - x0);
x = Xmax;
} else if (codeOut & LEFT) {
y = y0 + (y1 - y0) * (Xmin - x0) / (x1 - x0);
x = Xmin;
}
// Update the point that was clipped
if (codeOut == code0) {
x0 = x;
y0 = y;
code0 = computeOutCode(x0, y0);
} else {
x1 = x;
y1 = y;
code1 = computeOutCode(x1, y1);
}
}
}
if (!accept) {
// Set coordinates to off-screen to indicate rejection
x0 = y0 = x1 = y1 = -1.0f;
}
}
void drawLine(float x0, float y0, float x1, float y1) {
glBegin(GL_LINES);
glVertex2f(x0, y0);
glVertex2f(x1, y1);
glEnd();
}
void drawClipWindow() {
glBegin(GL_LINE_LOOP);
glVertex2f(Xmin, Ymin);
glVertex2f(Xmax, Ymin);
glVertex2f(Xmax, Ymax);
glVertex2f(Xmin, Ymax);
glEnd();
}
void display() {
glClear(GL_COLOR_BUFFER_BIT);
// Define and clip a line
float x0 = -0.5f, y0 = -0.5f, x1 = 0.9f, y1 = 0.9f;
cohenSutherlandClip(x0, y0, x1, y1);
// Draw the clipping window
glColor3f(1.0f, 1.0f, 1.0f);
drawClipWindow();
// Draw the clipped line
if (x0 != -1.0f) {
glColor3f(1.0f, 0.0f, 0.0f);
drawLine(x0, y0, x1, y1);
}
glFlush();
}
int main() {
// Initialize GLFW
if (!glfwInit()) {
std::cerr << "Failed to initialize GLFW\n";
return -1;
}
// Create a windowed mode window and its OpenGL context
GLFWwindow* window = glfwCreateWindow(800, 600, "Cohen-Sutherland
Line Clipping", NULL, NULL);
if (!window) {
std::cerr << "Failed to create GLFW window\n";
glfwTerminate();
return -1;
}
glfwMakeContextCurrent(window);
// Set up OpenGL
glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);
glClearColor(0.0, 0.0, 0.0, 1.0);
glColor3f(1.0, 1.0, 1.0);
// Main loop
while (!glfwWindowShouldClose(window)) {
display();
glfwSwapBuffers(window);
glfwPollEvents();
}
glfwTerminate();
return 0;
}

